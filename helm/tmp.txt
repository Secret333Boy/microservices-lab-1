---
# Source: main/charts/auth/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: auth-postgres
  labels:
    app.kubernetes.io/name: auth-postgres
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  postgresql-password: "cG9zdGdyZXM="
---
# Source: main/charts/auth/templates/secrets/auth.secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: auth-secret
type: Opaque
data:
  PASSWORD_SALT: JDJiJDEwJG9rd3pXU0U4MmtlN1k4SDIudUF1dXU=
  ACCESS_TOKEN_SECRET: QUNDRVNTX1RPS0VOX1NFQ1JFVA==
  REFRESH_TOKEN_SECRET: UkVGUkVTSF9UT0tFTl9TRUNSRVQ=
  POSTGRES_DB: cG9zdGdyZXM=
  POSTGRES_USER: cG9zdGdyZXM=
  POSTGRES_PASSWORD: cG9zdGdyZXM=
---
# Source: main/charts/booking/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: booking-postgres
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  postgresql-password: "cG9zdGdyZXM="
---
# Source: main/charts/booking/templates/config/booking.secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: booking-secret
type: Opaque
data:
  POSTGRES_DB: Ym9va2luZy1zZXJ2aWNl
  POSTGRES_USER: cG9zdGdyZXM=
  POSTGRES_PASSWORD: cG9zdGdyZXM=
---
# Source: main/charts/client/templates/secrets/client.secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: client-secret
type: Opaque
data:
  REACT_APP_GATEWAY_URL: aHR0cDovLzE5Mi4xNjguNDkuMjo4MA==
---
# Source: main/charts/email/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: email-postgres
  labels:
    app.kubernetes.io/name: email-postgres
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  postgresql-password: "cG9zdGdyZXM="
---
# Source: main/charts/email/templates/secrets/email.secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: email-secret
type: Opaque
data:
  POSTGRES_DB: cG9zdGdyZXM=
  POSTGRES_USER: cG9zdGdyZXM=
  POSTGRES_PASSWORD: cG9zdGdyZXM=
  FROM_EMAIL_VALUE: emFyYW5pa2J6QGdtYWlsLmNvbQ==
  EMAIL_KEY: ZmNpZWJmc3dhbWlna3N4aQ==
---
# Source: main/charts/movie-management/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: movie-management-postgres
  labels:
    app.kubernetes.io/name: movie-management-postgres
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  postgresql-password: "cG9zdGdyZXM="
---
# Source: main/charts/movie-management/templates/secrets/movie-management-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: movie-management-secret
type: Opaque
data:
  POSTGRES_DB: bW92aWUtbWFuYWdlbWVudA==
  POSTGRES_USER: cG9zdGdyZXM=
  POSTGRES_PASSWORD: cG9zdGdyZXM=
---
# Source: main/charts/auth/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: auth-postgres-headless
  labels:
    app.kubernetes.io/name: auth-postgres
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: auth-postgres
    app.kubernetes.io/instance: release-name
---
# Source: main/charts/auth/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: auth-postgres
  labels:
    app.kubernetes.io/name: auth-postgres
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: auth-postgres
    app.kubernetes.io/instance: release-name
    role: primary
---
# Source: main/charts/auth/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: auth
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8082
  selector:
    app: auth-pod
---
# Source: main/charts/booking/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: booking-postgres-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
---
# Source: main/charts/booking/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: booking-postgres
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    role: primary
---
# Source: main/charts/booking/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: booking-service
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app: booking-pod
---
# Source: main/charts/client/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: client
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 80
  selector:
    app: client-pod
---
# Source: main/charts/email/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: email-postgres-headless
  labels:
    app.kubernetes.io/name: email-postgres
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: email-postgres
    app.kubernetes.io/instance: release-name
---
# Source: main/charts/email/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: email-postgres
  labels:
    app.kubernetes.io/name: email-postgres
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: email-postgres
    app.kubernetes.io/instance: release-name
    role: primary
---
# Source: main/charts/email/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: email
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8083
  selector:
    app: email-pod
---
# Source: main/charts/movie-management/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: movie-management-postgres-headless
  labels:
    app.kubernetes.io/name: movie-management-postgres
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: movie-management-postgres
    app.kubernetes.io/instance: release-name
---
# Source: main/charts/movie-management/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: movie-management-postgres
  labels:
    app.kubernetes.io/name: movie-management-postgres
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: movie-management-postgres
    app.kubernetes.io/instance: release-name
    role: primary
---
# Source: main/charts/movie-management/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: movie-management
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8081
  selector:
    app: movie-management-pod
---
# Source: main/charts/auth/templates/deployment.yaml
# Values з common Chart# Values з основного Chart# записуємо common Values в змінну Values# містить усе крім Values, зокрема Chart, Release---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-pod
  template:
    metadata:
      labels:
        app: auth-pod
    spec:
      
      
      initContainers:
        - name: auth-migration
          image: secret333boy/auth-migrations:1.2
          command: ["db-migrate", "up", "--config", "database.json", "-e", "prod"]
          env:
            
            - name: GATEWAY_URL
            
              value: http://192.168.49.2:80
            
            
            - name: PASSWORD_SALT
            
              valueFrom:
                secretKeyRef:
                  name: auth-secret
                  key: PASSWORD_SALT
            
            
            - name: ACCESS_TOKEN_SECRET
            
              valueFrom:
                secretKeyRef:
                  name: auth-secret
                  key: ACCESS_TOKEN_SECRET
            
            
            - name: REFRESH_TOKEN_SECRET
            
              valueFrom:
                secretKeyRef:
                  name: auth-secret
                  key: REFRESH_TOKEN_SECRET
            
            
            - name: POSTGRES_DB
            
              valueFrom:
                secretKeyRef:
                  name: auth-secret
                  key: POSTGRES_DB
            
            
            - name: POSTGRES_USER
            
              valueFrom:
                secretKeyRef:
                  name: auth-secret
                  key: POSTGRES_USER
            
            
            - name: POSTGRES_PASSWORD
            
              valueFrom:
                secretKeyRef:
                  name: auth-secret
                  key: POSTGRES_PASSWORD
            
            
      
      containers:
        - image: zaranik/auth:2.3
          name: auth-container
          ports:
            - containerPort: 8082
          env:
            
            - name: GATEWAY_URL
            
              value: http://192.168.49.2:80
            
            
            - name: PASSWORD_SALT
            
              valueFrom:
                secretKeyRef:
                  name: auth-secret
                  key: PASSWORD_SALT
            
            
            - name: ACCESS_TOKEN_SECRET
            
              valueFrom:
                secretKeyRef:
                  name: auth-secret
                  key: ACCESS_TOKEN_SECRET
            
            
            - name: REFRESH_TOKEN_SECRET
            
              valueFrom:
                secretKeyRef:
                  name: auth-secret
                  key: REFRESH_TOKEN_SECRET
            
            
            - name: POSTGRES_DB
            
              valueFrom:
                secretKeyRef:
                  name: auth-secret
                  key: POSTGRES_DB
            
            
            - name: POSTGRES_USER
            
              valueFrom:
                secretKeyRef:
                  name: auth-secret
                  key: POSTGRES_USER
            
            
            - name: POSTGRES_PASSWORD
            
              valueFrom:
                secretKeyRef:
                  name: auth-secret
                  key: POSTGRES_PASSWORD
            
            
          resources:
            limits:
              memory: 512Mi
              cpu: 250m
---
# Source: main/charts/booking/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: booking-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: booking
  template:
    metadata:
      labels:
        app: booking
    spec:
      containers:
        - image: zaranik/booking-service:2.2
          name: booking-container
          ports:
            - containerPort: 8084
          envFrom:
            - configMapRef:
                name: postgres-config
            - secretRef:
                name: booking-secret
          resources:
            limits:
              memory: "512Mi"
              cpu: "250m"
---
# Source: main/charts/client/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: client-pod
  template:
    metadata:
      labels:
        app: client-pod
    spec:
      containers:
        - image: zaranik/client:1.41
          name: client-container
          ports:
            - containerPort: 80
          env:
            - name: REACT_APP_GATEWAY_URL
              valueFrom:
                secretKeyRef:
                  name: client-secret
                  key: REACT_APP_GATEWAY_URL
          resources:
            limits:
              memory: 512Mi
              cpu: 250m
---
# Source: main/charts/email/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: email-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: email-pod
  template:
    metadata:
      labels:
        app: email-pod
    spec:
      containers:
        - image: zaranik/email-service:3.1
          name: email-container
          ports:
            - containerPort: 8083
          resources:
            limits:
              memory: 512Mi
              cpu: 250m
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: email-secret
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: email-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: email-secret
                  key: POSTGRES_PASSWORD
            - name: FROM_EMAIL_VALUE
              valueFrom:
                secretKeyRef:
                  name: email-secret
                  key: FROM_EMAIL_VALUE
            - name: EMAIL_KEY
              valueFrom:
                secretKeyRef:
                  name: email-secret
                  key: EMAIL_KEY
---
# Source: main/charts/movie-management/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: movie-management-deployment
  labels:
    app: movie-management-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: movie-management-pod
  template:
    metadata:
      labels:
        app: movie-management-pod
    spec:
      containers:
        - image: 96223961382/movie-management-service:2.7
          name: movie-management-container
          ports:
            - containerPort: 8081
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: movie-management-secret
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: movie-management-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: movie-management-secret
                  key: POSTGRES_PASSWORD
          resources:
            limits:
              memory: 512Mi
              cpu: 250m
---
# Source: main/charts/auth/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: auth-postgres
  labels:
    app.kubernetes.io/name: auth-postgres
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: auth-postgres-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: auth-postgres
      app.kubernetes.io/instance: release-name
      role: primary
  template:
    metadata:
      name: auth-postgres
      labels:
        app.kubernetes.io/name: auth-postgres
        helm.sh/chart: postgresql-10.16.2
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: auth-postgres
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: auth-postgres
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r28
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/var/lib/postgresql/data"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: auth-postgres
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "postgres"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
---
# Source: main/charts/booking/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: booking-postgres
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: booking-postgres-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      role: primary
  template:
    metadata:
      name: booking-postgres
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.16.2
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: booking-postgres
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r28
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/var/lib/postgresql/data"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: booking-postgres
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "booking-service"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=booking-service" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=booking-service" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
---
# Source: main/charts/email/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: email-postgres
  labels:
    app.kubernetes.io/name: email-postgres
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: email-postgres-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: email-postgres
      app.kubernetes.io/instance: release-name
      role: primary
  template:
    metadata:
      name: email-postgres
      labels:
        app.kubernetes.io/name: email-postgres
        helm.sh/chart: postgresql-10.16.2
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: email-postgres
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: email-postgres
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r28
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/var/lib/postgresql/data"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: email-postgres
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "postgres"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
---
# Source: main/charts/movie-management/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: movie-management-postgres
  labels:
    app.kubernetes.io/name: movie-management-postgres
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: movie-management-postgres-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: movie-management-postgres
      app.kubernetes.io/instance: release-name
      role: primary
  template:
    metadata:
      name: movie-management-postgres
      labels:
        app.kubernetes.io/name: movie-management-postgres
        helm.sh/chart: postgresql-10.16.2
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: movie-management-postgres
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: movie-management-postgres
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r28
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/var/lib/postgresql/data"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: movie-management-postgres
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "movie-management"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=movie-management" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=movie-management" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
---
# Source: main/charts/auth/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: auth-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - http:
        paths:
          - path: /api/auth
            pathType: "Prefix"
            backend:
              service:
                name: auth
                port:
                  number: 80
---
# Source: main/charts/booking/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: booking-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - http:
        paths:
          - path: /api/booking
            pathType: "Prefix"
            backend:
              service:
                name: booking
                port:
                  number: 80
---
# Source: main/charts/client/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: client-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - http:
        paths:
          - path: /
            pathType: "Prefix"
            backend:
              service:
                name: client
                port:
                  number: 80
---
# Source: main/charts/movie-management/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: movie-management-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - http:
        paths:
          - path: /api/movie-management
            pathType: "Prefix"
            backend:
              service:
                name: movie-management
                port:
                  number: 80
